skip_branch_with_pr: true

environment:
# # matrix generated from
# import itertools

# parameters = (
#     ('python', ((3,5), (3,6))),
#     ('bitness', (32, 64)),
#     ('mode', ('core', 'twisted', 'asyncio', 'wheel')),
# )

# parameter_names = [p[0] for p in parameters]
# parameter_values = [p[1] for p in parameters]

# def get_toxenv(python, bitness, mode):
#     return 'py{}{}-{}'.format(*python, mode)

# def get_python(python, bitness, mode):
#     return '"C:\\\\Python{}{}{}"'.format(
#         *python,
#         {32: '', 64:'-x64'}[bitness],
#     )

# print('  matrix:')

# for values in itertools.product(*parameter_values):
#     d = {name: value for name, value in zip(parameter_names, values)}
#     toxenv = get_toxenv(**d)
#     python = get_python(**d)

#     print('    - TOXENV: {}'.format(toxenv))
#     print('      PYTHON: {}'.format(python))


  matrix:
    - TOXENV: py35-core
      PYTHON: "C:\\Python35"
    - TOXENV: py35-twisted
      PYTHON: "C:\\Python35"
    - TOXENV: py35-asyncio
      PYTHON: "C:\\Python35"
    - TOXENV: py35-wheel
      PYTHON: "C:\\Python35"
    - TOXENV: py35-core
      PYTHON: "C:\\Python35-x64"
    - TOXENV: py35-twisted
      PYTHON: "C:\\Python35-x64"
    - TOXENV: py35-asyncio
      PYTHON: "C:\\Python35-x64"
    - TOXENV: py35-wheel
      PYTHON: "C:\\Python35-x64"
    - TOXENV: py36-core
      PYTHON: "C:\\Python36"
    - TOXENV: py36-twisted
      PYTHON: "C:\\Python36"
    - TOXENV: py36-asyncio
      PYTHON: "C:\\Python36"
    - TOXENV: py36-wheel
      PYTHON: "C:\\Python36"
    - TOXENV: py36-core
      PYTHON: "C:\\Python36-x64"
    - TOXENV: py36-twisted
      PYTHON: "C:\\Python36-x64"
    - TOXENV: py36-asyncio
      PYTHON: "C:\\Python36-x64"
    - TOXENV: py36-wheel
      PYTHON: "C:\\Python36-x64"

# https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
init:
  - ps: if (Get-ChildItem Env:ENABLE_RDP -ErrorAction SilentlyContinue) {iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))} else {echo RDP not enabled}
  - echo "TOXENV- %TOXENV%"

install:
  - git submodule update --init
  - virtualenv -p "%PYTHON%\\python.exe" venv
  - venv\\Scripts\\activate
  - pip install -r requirements.test
  - pip install .
  - ps: Update-AppveyorBuild -Version "v$(python -c 'import sys; import altendpyqt5; sys.stdout.write(altendpyqt5.__version__)') b$Env:APPVEYOR_BUILD_NUMBER"

build:
  - tox -vvvvvvvv
  - tox -e codecov

artifacts:
  - path: "dist\\*.whl"

# https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
on_finish:
  - ps: if (Get-ChildItem Env:ENABLE_RDP -ErrorAction SilentlyContinue) {$blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))} else {echo RDP not enabled}
